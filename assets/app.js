angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("userLoggedIn",function(e,n){t.currentUser=n})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,e){t.login=function(n,o){e.login(n,o).then(function(e){console.log(e.data),t.$emit("userLoggedIn",e.data)})}}]),angular.module("app").controller("PostsCtrl",["$scope","$http","PostsService",function(t,e,n){t.addPost=function(){t.postBody&&n.send({username:"tomi7",body:t.postBody}).success(function(e){t.posts.unshift(e),t.postBody=null})},n.get().success(function(e){t.posts=e})}]),angular.module("app").service("PostsService",["$http",function(t){this.get=function(){return t.get("/api/posts")},this.send=function(e){return t.post("/api/posts",e)}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var e=this;e.getUser=function(){return t.get("/api/users",{headers:{"X-Auth":this.token}})},e.login=function(n,o){return t.post("/api/sessions",{username:n,password:o}).then(function(t){return e.token=t.data,e.getUser()})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uQ3RybC5qcyIsImxvZ2luQ3J0bC5qcyIsInBvc3RzQ3RybC5qcyIsInBvc3RzU2VydmljZS5qcyIsInJvdXRlcy5qcyIsInVzZXJTZXJ2aWNlLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJG9uIiwiZXZlbnQiLCJ1c2VyIiwiY3VycmVudFVzZXIiLCJVc2VyU3ZjIiwibG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidGhlbiIsInJlc3BvbnNlIiwiY29uc29sZSIsImxvZyIsImRhdGEiLCIkZW1pdCIsIiRodHRwIiwiUG9zdHNTZXJ2aWNlIiwiYWRkUG9zdCIsInBvc3RCb2R5Iiwic2VuZCIsImJvZHkiLCJzdWNjZXNzIiwicG9zdCIsInBvc3RzIiwidW5zaGlmdCIsImdldCIsInNlcnZpY2UiLCJ0aGlzIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJzdmMiLCJnZXRVc2VyIiwiaGVhZGVycyIsIlgtQXV0aCIsInRva2VuIiwidmFsIl0sIm1hcHBpbmdzIjoiQUFDQUEsUUFBQUMsT0FBQSxPQUFBLFlDREFELFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxtQkFBQSxTQUFBLFNBQUFDLEdBQ0FBLEVBQUFDLElBQUEsZUFBQSxTQUFBQyxFQUFBQyxHQUNBSCxFQUFBSSxZQUFBRCxPQ0hBTixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBQSxTQUFBLFVBQUEsU0FBQUMsRUFBQUssR0FDQUwsRUFBQU0sTUFBQSxTQUFBQyxFQUFBQyxHQUNBSCxFQUFBQyxNQUFBQyxFQUFBQyxHQUNBQyxLQUFBLFNBQUFDLEdBQ0FDLFFBQUFDLElBQUFGLEVBQUFHLE1BQ0FiLEVBQUFjLE1BQUEsZUFBQUosRUFBQUcsWUNOQWhCLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxhQUFBLFNBQUEsUUFBQSxlQUFBLFNBQUFDLEVBQUFlLEVBQUFDLEdBQ0FoQixFQUFBaUIsUUFBQSxXQUNBakIsRUFBQWtCLFVBQ0FGLEVBQUFHLE1BQ0FaLFNBQUEsUUFDQWEsS0FBQXBCLEVBQUFrQixXQUVBRyxRQUFBLFNBQUFDLEdBQ0F0QixFQUFBdUIsTUFBQUMsUUFBQUYsR0FDQXRCLEVBQUFrQixTQUFBLFFBS0FGLEVBQUFTLE1BQ0FKLFFBQUEsU0FBQUUsR0FDQXZCLEVBQUF1QixNQUFBQSxPQ2pCQTFCLFFBQUFDLE9BQUEsT0FDQTRCLFFBQUEsZ0JBQUEsUUFBQSxTQUFBWCxHQUNBWSxLQUFBRixJQUFBLFdBQ0EsTUFBQVYsR0FBQVUsSUFBQSxlQUVBRSxLQUFBUixLQUFBLFNBQUFHLEdBQ0EsTUFBQVAsR0FBQU8sS0FBQSxhQUFBQSxPQ05BekIsUUFBQUMsT0FBQSxPQUNBOEIsUUFBQSxpQkFBQSxTQUFBQyxHQUNBQSxFQUNBQyxLQUFBLEtBQUEvQixXQUFBLFlBQUFnQyxZQUFBLGVBQ0FELEtBQUEsYUFBQS9CLFdBQUEsZUFBQWdDLFlBQUEsa0JBQ0FELEtBQUEsVUFBQS9CLFdBQUEsWUFBQWdDLFlBQUEsa0JDTEFsQyxRQUFBQyxPQUFBLE9BQ0E0QixRQUFBLFdBQUEsUUFBQSxTQUFBWCxHQUNBLEdBQUFpQixHQUFBTCxJQUNBSyxHQUFBQyxRQUFBLFdBQ0EsTUFBQWxCLEdBQUFVLElBQUEsY0FDQVMsU0FBQUMsU0FBQVIsS0FBQVMsVUFHQUosRUFBQTFCLE1BQUEsU0FBQUMsRUFBQUMsR0FDQSxNQUFBTyxHQUFBTyxLQUFBLGlCQUNBZixTQUFBQSxFQUFBQyxTQUFBQSxJQUVBQyxLQUFBLFNBQUE0QixHQUVBLE1BREFMLEdBQUFJLE1BQUFDLEVBQUF4QixLQUNBbUIsRUFBQUMiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9UaGlzIGZpbGUgbXVzdCBiZSB0aGUgZmlyc3QgaW4gdGhlIGxpc3QgdG8gYmUgY29uY2F0ZW5hdGVkXG5hbmd1bGFyLm1vZHVsZSgnYXBwJywgWyduZ1JvdXRlJ10pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG5cdC5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkN0cmwnICwgW1wiJHNjb3BlXCIsIGZ1bmN0aW9uICgkc2NvcGUpIHtcblx0XHQkc2NvcGUuJG9uKCd1c2VyTG9nZ2VkSW4nLCBmdW5jdGlvbihldmVudCwgdXNlcikge1xuXHRcdFx0JHNjb3BlLmN1cnJlbnRVc2VyID0gdXNlcjtcblx0XHR9KVxuXHR9XSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcblx0LmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcgLCBbXCIkc2NvcGVcIiAsIFwiVXNlclN2Y1wiICwgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2Yykge1xuXHRcdCRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcblx0XHRcdFVzZXJTdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuXHRcdFx0XHQudGhlbihmdW5jdGlvbiAocmVzcG9uc2Upe1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpO1xuXHRcdFx0XHRcdCRzY29wZS4kZW1pdCgndXNlckxvZ2dlZEluJywgcmVzcG9uc2UuZGF0YSk7XG5cdFx0XHRcdH0pXG5cdFx0fVxuXHR9XSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcblx0LmNvbnRyb2xsZXIoJ1Bvc3RzQ3RybCcsIFtcIiRzY29wZVwiICwgXCIkaHR0cFwiLCBcIlBvc3RzU2VydmljZVwiICwgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsIFBvc3RzU2VydmljZSkge1xuXHRcdCRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKCRzY29wZS5wb3N0Qm9keSkge1xuXHRcdFx0XHRQb3N0c1NlcnZpY2Uuc2VuZCh7XG5cdFx0XHRcdFx0dXNlcm5hbWU6ICd0b21pNycsXG5cdFx0XHRcdFx0Ym9keTogJHNjb3BlLnBvc3RCb2R5XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0KSB7XG5cdFx0XHRcdFx0JHNjb3BlLnBvc3RzLnVuc2hpZnQocG9zdCk7XG5cdFx0XHRcdFx0JHNjb3BlLnBvc3RCb2R5ID0gbnVsbDtcblx0XHRcdFx0fSlcblx0XHRcdH1cblx0XHR9XG5cblx0UG9zdHNTZXJ2aWNlLmdldCgpXG5cdFx0LnN1Y2Nlc3MoZnVuY3Rpb24gKHBvc3RzKSB7XG5cdFx0XHQkc2NvcGUucG9zdHMgPSBwb3N0cztcblx0XHR9KVxuXG5cdH1dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuXHQuc2VydmljZSgnUG9zdHNTZXJ2aWNlJywgW1wiJGh0dHBcIiAsIGZ1bmN0aW9uICgkaHR0cCkge1xuXHRcdHRoaXMuZ2V0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cycpO1xuXHRcdH1cblx0XHR0aGlzLnNlbmQgPSBmdW5jdGlvbiAocG9zdCkge1xuXHRcdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcG9zdHMnLCBwb3N0KTtcblx0XHR9XG5cdH1dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuXHQuY29uZmlnKFtcIiRyb3V0ZVByb3ZpZGVyXCIgLGZ1bmN0aW9uICgkcm91dGVQcm92aWRlcikge1xuXHRcdCRyb3V0ZVByb3ZpZGVyXG5cdFx0XHQud2hlbignLycgLCB7Y29udHJvbGxlcjogJ1Bvc3RzQ3RybCcsIHRlbXBsYXRlVXJsOiAncG9zdHMuaHRtbCd9KVxuXHRcdFx0LndoZW4oJy9yZWdpc3RlcicgLCB7Y29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsIHRlbXBsYXRlVXJsOiAncmVnaXN0ZXIuaHRtbCd9KVxuXHRcdFx0LndoZW4oJy9sb2dpbicgLCB7Y29udHJvbGxlcjogJ0xvZ2luQ3RybCcsIHRlbXBsYXRlVXJsOiAnbG9naW4uaHRtbCd9KVxuXHR9XSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcblx0LnNlcnZpY2UoJ1VzZXJTdmMnLCBbXCIkaHR0cFwiLCBmdW5jdGlvbigkaHR0cCkge1xuXHRcdHZhciBzdmMgPSB0aGlzO1xuXHRcdHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VycycsIHtcblx0XHRcdFx0aGVhZGVyczogeyAnWC1BdXRoJzogdGhpcy50b2tlbiB9XG5cdFx0XHR9KVxuXHRcdH1cblx0XHRzdmMubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG5cdFx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIHtcblx0XHRcdFx0dXNlcm5hbWU6IHVzZXJuYW1lLCBwYXNzd29yZDogcGFzc3dvcmRcblx0XHRcdH0pXG5cdFx0XHQudGhlbihmdW5jdGlvbiAodmFsKSB7XG5cdFx0XHRcdHN2Yy50b2tlbiA9IHZhbC5kYXRhO1xuXHRcdFx0XHRyZXR1cm4gc3ZjLmdldFVzZXIoKTtcblx0XHRcdH0pXG5cdFx0fVxuXHR9XSkiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=