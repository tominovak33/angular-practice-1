angular.module("app",["ngRoute","ngAnimate"]),angular.module("app").controller("ApplicationCtrl",["$scope","$rootScope","UserSvc",function(t,e,n){window.localStorage.token&&n.getUser().then(function(e){t.$emit("userLoggedIn",e.data)}),t.$on("userLoggedIn",function(e,n){t.currentUser=n})}]).filter("output_html",["$sce",function(t){return function(e){return t.trustAsHtml(e)}}]).filter("startFrom",function(){return function(t,e){return t?(e=+e,t.slice(e)):[]}}),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,e){t.login=function(n,o){e.login(n,o).then(function(e){t.$emit("userLoggedIn",e.data),window.location.href="#/"},function(e){t.loginValidation="Incorrect username & password combination"})},t.logout=function(){e.logout()}}]),angular.module("app").controller("PostsCtrl",["$scope","$http","PostsService","filterFilter",function(t,e,n,o){t.baseUrl=location.host,t.bodyLengthLimit=250,t.posts=[],t.addPost=function(){var e=CKEDITOR.instances.editor1.getData(),o=t.urlDate(),r=t.slugify(t.postTitle),s=o+r;e&&n.send({body:e,title:t.postTitle,slug:s}).success(function(e){t.postBody=null,CKEDITOR.instances.editor1.setData(""),t.postTitle=null})},t.init_ckedit=function(){CKEDITOR.replace("editor1")},t.$on("ws:new_post",function(e,n){n=n[0],t.$apply(function(){t.posts.unshift(n),t.paginate()})}),t.$on("$viewContentLoaded",function(){}),t.currentPage=1,t.postsPerPage=5,t.prevPage=function(){t.currentPage>1&&t.currentPage--},t.nextPage=function(){t.currentPage<t.posts.length/t.postsPerPage&&t.currentPage++},t.setPage=function(e){t.currentPage=e},t.range=function(t){return new Array(t)},t.$watch("search",function(e){t.filteredPosts=o(t.posts,e),t.paginate(t.filteredPosts.length)},!0),t.paginate=function(e){t.numberOfPages=Math.ceil(e>0?e/t.postsPerPage:t.posts.length/t.postsPerPage)},t.urlDate=function(t){if(void 0===t)var e=new Date;else var e=new Date(t);var n=e.getDate(),o=e.getMonth()+1,r=e.getFullYear(),s=String(r)+"-"+String(o)+"-"+String(n)+"-";return s},t.slugify=function(t){var e=t.toLowerCase();return e=e.replace(/\s+/g,"_"),e=e.replace(/\?/g,""),e=e.replace(/\&/g,""),e=e.replace(/\=/g,"")},n.get().success(function(e){t.posts=e,t.paginate(t.posts.length)})}]),angular.module("app").service("PostsService",["$http",function(t){this.get=function(){return t.get("/api/posts")},this.send=function(e){return t.post("/api/posts",e)},this.single_slug=function(e){return t.get("/api/posts",{params:{post_slug:e.slug}})},this.single_id=function(e){return t.get("/api/posts",{params:{post_id:e.id}})},this.user_posts=function(e){return t.get("/api/posts",{params:{_author:e._author}})}}]),angular.module("app").controller("ProfileCtrl",["$scope","$http","UserSvc","PostsService","$routeParams","$route","$location",function(t,e,n,o,r,s,a){t.baseUrl=location.host;var i=r.username;t.$on("$viewContentLoaded",function(){}),t.user_posts=[],t.currentPage=1,t.postsPerPage=5,t.prevPage=function(){t.currentPage>1&&t.currentPage--},t.nextPage=function(){t.currentPage<t.user_posts.length/t.postsPerPage&&t.currentPage++},t.setPage=function(e){t.currentPage=e},t.range=function(t){return new Array(t)},t.paginate=function(e){t.numberOfPages=Math.ceil(e>0?e/t.postsPerPage:t.user_posts.length/t.postsPerPage)},t.range=function(t){return new Array(t)},n.profile(i).success(function(e){t.user_profile=e,o.user_posts({_author:t.user_profile._id}).success(function(e){t.user_posts=e,t.paginate(t.user_posts.length)})})}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,e){t.register=function(n,o,r){return o!=r?void(t.validationMessage="Your passwords did not match."):void e.register(n,o)}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}).when("/logout",{controller:"LoginCtrl",templateUrl:"logout.html"}).when("/post/:slug",{controller:"SinglePostCtrl",templateUrl:"singlePost.html"}).when("/post/id/:id",{controller:"SinglePostCtrl",templateUrl:"singlePost.html"}).when("/user/:username",{controller:"ProfileCtrl",templateUrl:"user.html"})}]),angular.module("app").controller("SinglePostCtrl",["$scope","$http","PostsService","$routeParams","$route","$location",function(t,e,n,o,r,s){var a=o.slug,i=o.id;t.$on("$viewContentLoaded",function(){}),a?n.single_slug({slug:a}).success(function(e){t.post=e}):n.single_id({id:i}).success(function(e){t.post=e})}]),angular.module("app").service("UserSvc",["$http",function(t){var e=this;e.getUser=function(){return t.defaults.headers.common["X-Auth"]=window.localStorage.token,t.get("/api/users").then(function(t){return t})},e.login=function(n,o){return t.post("/api/sessions",{username:n,password:o}).then(function(n){return window.localStorage.token=n.data,t.defaults.headers.common["X-Auth"]=n.data,e.getUser()})},e.register=function(n,o,r){return t.post("/api/users",{username:n,password:o}).then(function(t){return e.login(n,o).then(function(){window.location.href="/"})})},e.logout=function(){window.localStorage.removeItem("token"),window.location.href="/"},e.profile=function(e){return t.get("/api/users/profile",{params:{username:e}})}}]),angular.module("app").run(["$rootScope","$timeout","$window",function(t,e,n){!function o(){var r="ws://"+n.location.host,s=new WebSocket(r);s.onopen=function(){},s.onclose=function(t){e(o,1e4)},s.onmessage=function(e){var n=JSON.parse(e.data),o="ws:"+n.topic,r=n.data;t.$broadcast(o,r)}}()}]);
//# sourceMappingURL=data:application/json;base64,