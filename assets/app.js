angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope","$rootScope","UserSvc",function(o,t,n){window.localStorage.token&&n.getUser().then(function(t){o.$emit("userLoggedIn",t.data)}),o.$on("userLoggedIn",function(t,n){o.currentUser=n})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(o,t){o.login=function(n,e){t.login(n,e).then(function(t){o.$emit("userLoggedIn",t.data)},function(t){o.loginValidation="Incorrect username & password combination"})}}]),angular.module("app").controller("PostsCtrl",["$scope","$http","PostsService",function(o,t,n){o.addPost=function(){var t=CKEDITOR.instances.editor1.getData();t&&n.send({body:t}).success(function(t){o.postBody=null})},o.init_ckedit=function(){CKEDITOR.replace("editor1"),document.getElementById("post-simple-input").style.display="none"},o.$on("ws:new_post",function(t,n){o.$apply(function(){o.posts.unshift(n)})}),o.$on("$viewContentLoaded",function(){}),n.get().success(function(t){o.posts=t})}]).filter("output_html",["$sce",function(o){return function(t){return o.trustAsHtml(t)}}]),angular.module("app").service("PostsService",["$http",function(o){this.get=function(){return o.get("/api/posts")},this.send=function(t){return o.post("/api/posts",t)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(o,t){o.register=function(n,e,r){return e!=r?void(o.validationMessage="Your passwords did not match."):void t.register(n,e)}}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(o){var t=this;t.getUser=function(){return o.defaults.headers.common["X-Auth"]=window.localStorage.token,o.get("/api/users").then(function(o){return o})},t.login=function(n,e){return o.post("/api/sessions",{username:n,password:e}).then(function(n){return window.localStorage.token=n.data,o.defaults.headers.common["X-Auth"]=n.data,t.getUser()})},t.register=function(n,e,r){return o.post("/api/users",{username:n,password:e}).then(function(o){return t.login(n,e).then(function(){window.location.href="/"})})},t.logout=function(){window.localStorage.removeItem("token")}}]),angular.module("app").run(["$rootScope","$timeout","$window",function(o,t,n){!function e(){var r="ws://"+n.location.host,s=new WebSocket(r);s.onopen=function(){console.log("Websocket connected")},s.onclose=function(o){console.log("Websocket closed. Trying to reconnect..."),t(e,1e4)},s.onmessage=function(t){console.log(t);var n=JSON.parse(t.data),e="ws:"+n.topic,r=n.data;console.log("broadcasting: "),o.$broadcast(e,r)}}()}]);
//# sourceMappingURL=data:application/json;base64,