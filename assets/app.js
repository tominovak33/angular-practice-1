angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(o){o.$on("userLoggedIn",function(t,e){o.currentUser=e})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(o,t){o.login=function(e,n){t.login(e,n).then(function(t){o.$emit("userLoggedIn",t.data)})}}]),angular.module("app").controller("PostsCtrl",["$scope","$http","PostsService",function(o,t,e){o.addPost=function(){o.postBody&&e.send({username:"tomi7",body:o.postBody}).success(function(t){o.posts.unshift(t),o.postBody=null})},o.$on("ws:new_post",function(o,t){alert("new post recieved")}),e.get().success(function(t){o.posts=t})}]),angular.module("app").service("PostsService",["$http",function(o){this.get=function(){return o.get("/api/posts")},this.send=function(t){return o.post("/api/posts",t)}}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(o){var t=this;t.getUser=function(){return o.get("/api/users",{headers:{"X-Auth":this.token}})},t.login=function(e,n){return o.post("/api/sessions",{username:e,password:n}).then(function(e){return t.token=e.data,o.defaults.headers.common["X-Auth"]=e.data,t.getUser()})}}]),angular.module("app").run(["$rootScope","$timeout",function(o,t){var e="ws://localhost:3000",n=new WebSocket(e);n.onopen=function(){console.log("Websocket connected")},n.onclose=function(o){console.log("Websocket closed. Trying to reconnect...")},n.onmessage=function(t){console.log(t);var e=JSON.parse(t.data),n="ws:"+e.topic,s=e.data;console.log("broadcasting: "),o.$broadcast(n,s)}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uQ3RybC5qcyIsImxvZ2luQ3J0bC5qcyIsInBvc3RzQ3RybC5qcyIsInBvc3RzU2VydmljZS5qcyIsInJvdXRlcy5qcyIsInVzZXJTZXJ2aWNlLmpzIiwid2Vic29ja2V0cy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIiRvbiIsImV2ZW50IiwidXNlciIsImN1cnJlbnRVc2VyIiwiVXNlclN2YyIsImxvZ2luIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInRoZW4iLCJyZXNwb25zZSIsIiRlbWl0IiwiZGF0YSIsIiRodHRwIiwiUG9zdHNTZXJ2aWNlIiwiYWRkUG9zdCIsInBvc3RCb2R5Iiwic2VuZCIsImJvZHkiLCJzdWNjZXNzIiwicG9zdCIsInBvc3RzIiwidW5zaGlmdCIsIl8iLCJhbGVydCIsImdldCIsInNlcnZpY2UiLCJ0aGlzIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJzdmMiLCJnZXRVc2VyIiwiaGVhZGVycyIsIlgtQXV0aCIsInRva2VuIiwidmFsIiwiZGVmYXVsdHMiLCJjb21tb24iLCJydW4iLCIkcm9vdFNjb3BlIiwiJHRpbWVvdXQiLCJ1cmwiLCJjb25uZWN0aW9uIiwiV2ViU29ja2V0Iiwib25vcGVuIiwiY29uc29sZSIsImxvZyIsIm9uY2xvc2UiLCJlIiwib25tZXNzYWdlIiwibWVzc2FnZSIsIkpTT04iLCJwYXJzZSIsIm5hbWUiLCJ0b3BpYyIsIiRicm9hZGNhc3QiXSwibWFwcGluZ3MiOiJBQUNBQSxRQUFBQyxPQUFBLE9BQUEsWUNEQUQsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLG1CQUFBLFNBQUEsU0FBQUMsR0FDQUEsRUFBQUMsSUFBQSxlQUFBLFNBQUFDLEVBQUFDLEdBQ0FILEVBQUFJLFlBQUFELE9DSEFOLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxhQUFBLFNBQUEsVUFBQSxTQUFBQyxFQUFBSyxHQUNBTCxFQUFBTSxNQUFBLFNBQUFDLEVBQUFDLEdBQ0FILEVBQUFDLE1BQUFDLEVBQUFDLEdBQ0FDLEtBQUEsU0FBQUMsR0FFQVYsRUFBQVcsTUFBQSxlQUFBRCxFQUFBRSxZQ05BZixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBQSxTQUFBLFFBQUEsZUFBQSxTQUFBQyxFQUFBYSxFQUFBQyxHQUNBZCxFQUFBZSxRQUFBLFdBQ0FmLEVBQUFnQixVQUNBRixFQUFBRyxNQUNBVixTQUFBLFFBQ0FXLEtBQUFsQixFQUFBZ0IsV0FFQUcsUUFBQSxTQUFBQyxHQUNBcEIsRUFBQXFCLE1BQUFDLFFBQUFGLEdBQ0FwQixFQUFBZ0IsU0FBQSxRQUtBaEIsRUFBQUMsSUFBQSxjQUFBLFNBQUFzQixFQUFBSCxHQVFBSSxNQUFBLHVCQUdBVixFQUFBVyxNQUNBTixRQUFBLFNBQUFFLEdBQ0FyQixFQUFBcUIsTUFBQUEsT0M1QkF4QixRQUFBQyxPQUFBLE9BQ0E0QixRQUFBLGdCQUFBLFFBQUEsU0FBQWIsR0FDQWMsS0FBQUYsSUFBQSxXQUNBLE1BQUFaLEdBQUFZLElBQUEsZUFFQUUsS0FBQVYsS0FBQSxTQUFBRyxHQUNBLE1BQUFQLEdBQUFPLEtBQUEsYUFBQUEsT0NOQXZCLFFBQUFDLE9BQUEsT0FDQThCLFFBQUEsaUJBQUEsU0FBQUMsR0FDQUEsRUFDQUMsS0FBQSxLQUFBL0IsV0FBQSxZQUFBZ0MsWUFBQSxlQUNBRCxLQUFBLGFBQUEvQixXQUFBLGVBQUFnQyxZQUFBLGtCQUNBRCxLQUFBLFVBQUEvQixXQUFBLFlBQUFnQyxZQUFBLGtCQ0xBbEMsUUFBQUMsT0FBQSxPQUNBNEIsUUFBQSxXQUFBLFFBQUEsU0FBQWIsR0FDQSxHQUFBbUIsR0FBQUwsSUFDQUssR0FBQUMsUUFBQSxXQUNBLE1BQUFwQixHQUFBWSxJQUFBLGNBQ0FTLFNBQUFDLFNBQUFSLEtBQUFTLFVBR0FKLEVBQUExQixNQUFBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQUssR0FBQU8sS0FBQSxpQkFDQWIsU0FBQUEsRUFBQUMsU0FBQUEsSUFFQUMsS0FBQSxTQUFBNEIsR0FHQSxNQUZBTCxHQUFBSSxNQUFBQyxFQUFBekIsS0FDQUMsRUFBQXlCLFNBQUFKLFFBQUFLLE9BQUEsVUFBQUYsRUFBQXpCLEtBQ0FvQixFQUFBQyxnQkNmQXBDLFFBQUFDLE9BQUEsT0FDQTBDLEtBQUEsYUFBQSxXQUFBLFNBQUFDLEVBQUFDLEdBRUEsR0FBQUMsR0FBQSxzQkFFQUMsRUFBQSxHQUFBQyxXQUFBRixFQUVBQyxHQUFBRSxPQUFBLFdBQ0FDLFFBQUFDLElBQUEsd0JBSUFKLEVBQUFLLFFBQUEsU0FBQUMsR0FDQUgsUUFBQUMsSUFBQSw2Q0FJQUosRUFBQU8sVUFBQSxTQUFBRCxHQUNBSCxRQUFBQyxJQUFBRSxFQUNBLElBQUFFLEdBQUFDLEtBQUFDLE1BQUFKLEVBQUF0QyxNQUVBMkMsRUFBQSxNQUFBSCxFQUFBSSxNQUNBNUMsRUFBQXdDLEVBQUF4QyxJQUNBbUMsU0FBQUMsSUFBQSxrQkFFQVAsRUFBQWdCLFdBQUFGLEVBQUEzQyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvL1RoaXMgZmlsZSBtdXN0IGJlIHRoZSBmaXJzdCBpbiB0aGUgbGlzdCB0byBiZSBjb25jYXRlbmF0ZWRcbmFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ25nUm91dGUnXSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcblx0LmNvbnRyb2xsZXIoJ0FwcGxpY2F0aW9uQ3RybCcgLCBbXCIkc2NvcGVcIiwgZnVuY3Rpb24gKCRzY29wZSkge1xuXHRcdCRzY29wZS4kb24oJ3VzZXJMb2dnZWRJbicsIGZ1bmN0aW9uKGV2ZW50LCB1c2VyKSB7XG5cdFx0XHQkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xuXHRcdH0pXG5cdH1dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuXHQuY29udHJvbGxlcignTG9naW5DdHJsJyAsIFtcIiRzY29wZVwiICwgXCJVc2VyU3ZjXCIgLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU3ZjKSB7XG5cdFx0JHNjb3BlLmxvZ2luID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuXHRcdFx0VXNlclN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSl7XG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcblx0XHRcdFx0XHQkc2NvcGUuJGVtaXQoJ3VzZXJMb2dnZWRJbicsIHJlc3BvbnNlLmRhdGEpO1xuXHRcdFx0XHR9KVxuXHRcdH1cblx0fV0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG5cdC5jb250cm9sbGVyKCdQb3N0c0N0cmwnLCBbXCIkc2NvcGVcIiAsIFwiJGh0dHBcIiwgXCJQb3N0c1NlcnZpY2VcIiwgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsIFBvc3RzU2VydmljZSkge1xuXHRcdCRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKCRzY29wZS5wb3N0Qm9keSkge1xuXHRcdFx0XHRQb3N0c1NlcnZpY2Uuc2VuZCh7XG5cdFx0XHRcdFx0dXNlcm5hbWU6ICd0b21pNycsXG5cdFx0XHRcdFx0Ym9keTogJHNjb3BlLnBvc3RCb2R5XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0KSB7XG5cdFx0XHRcdFx0JHNjb3BlLnBvc3RzLnVuc2hpZnQocG9zdCk7XG5cdFx0XHRcdFx0JHNjb3BlLnBvc3RCb2R5ID0gbnVsbDtcblx0XHRcdFx0fSlcblx0XHRcdH1cblx0XHR9XG5cblx0XHQkc2NvcGUuJG9uKCd3czpuZXdfcG9zdCcsIGZ1bmN0aW9uKF8sIHBvc3QpIHtcblx0XHRcdC8qXG5cdFx0XHRjb25zb2xlLmxvZyhcImFyZyAxOlwiKVxuXHRcdFx0Y29uc29sZS5sb2coZm9vKTtcblx0XHRcdGNvbnNvbGUubG9nKFwiYXJnIDI6XCIpXG5cdFx0XHRjb25zb2xlLmxvZyhwb3N0KTtcblx0XHRcdGNvbnNvbGUubG9nKCdlbmQnKTtcblx0XHRcdCovXG5cdFx0XHRhbGVydChcIm5ldyBwb3N0IHJlY2lldmVkXCIpXG5cdFx0fSlcblxuXHRQb3N0c1NlcnZpY2UuZ2V0KClcblx0XHQuc3VjY2VzcyhmdW5jdGlvbiAocG9zdHMpIHtcblx0XHRcdCRzY29wZS5wb3N0cyA9IHBvc3RzO1xuXHRcdH0pXG5cblx0fV0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG5cdC5zZXJ2aWNlKCdQb3N0c1NlcnZpY2UnLCBbXCIkaHR0cFwiICwgZnVuY3Rpb24gKCRodHRwKSB7XG5cdFx0dGhpcy5nZXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJyk7XG5cdFx0fVxuXHRcdHRoaXMuc2VuZCA9IGZ1bmN0aW9uIChwb3N0KSB7XG5cdFx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycsIHBvc3QpO1xuXHRcdH1cblx0fV0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG5cdC5jb25maWcoW1wiJHJvdXRlUHJvdmlkZXJcIiAsZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyKSB7XG5cdFx0JHJvdXRlUHJvdmlkZXJcblx0XHRcdC53aGVuKCcvJyAsIHtjb250cm9sbGVyOiAnUG9zdHNDdHJsJywgdGVtcGxhdGVVcmw6ICdwb3N0cy5odG1sJ30pXG5cdFx0XHQud2hlbignL3JlZ2lzdGVyJyAsIHtjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJywgdGVtcGxhdGVVcmw6ICdyZWdpc3Rlci5odG1sJ30pXG5cdFx0XHQud2hlbignL2xvZ2luJyAsIHtjb250cm9sbGVyOiAnTG9naW5DdHJsJywgdGVtcGxhdGVVcmw6ICdsb2dpbi5odG1sJ30pXG5cdH1dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuXHQuc2VydmljZSgnVXNlclN2YycsIFtcIiRodHRwXCIsIGZ1bmN0aW9uKCRodHRwKSB7XG5cdFx0dmFyIHN2YyA9IHRoaXM7XG5cdFx0c3ZjLmdldFVzZXIgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJywge1xuXHRcdFx0XHRoZWFkZXJzOiB7ICdYLUF1dGgnOiB0aGlzLnRva2VuIH1cblx0XHRcdH0pXG5cdFx0fVxuXHRcdHN2Yy5sb2dpbiA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcblx0XHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zJywge1xuXHRcdFx0XHR1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxuXHRcdFx0fSlcblx0XHRcdC50aGVuKGZ1bmN0aW9uICh2YWwpIHtcblx0XHRcdFx0c3ZjLnRva2VuID0gdmFsLmRhdGE7XG5cdFx0XHRcdCRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IHZhbC5kYXRhXG5cdFx0XHRcdHJldHVybiBzdmMuZ2V0VXNlcigpO1xuXHRcdFx0fSlcblx0XHR9XG5cdH1dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnJ1bihbXCIkcm9vdFNjb3BlXCIsIFwiJHRpbWVvdXRcIiAsIGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkdGltZW91dCkge1xuXHRcblx0XHR2YXIgdXJsID0gJ3dzOi8vbG9jYWxob3N0OjMwMDAnXG5cblx0XHR2YXIgY29ubmVjdGlvbiA9IG5ldyBXZWJTb2NrZXQodXJsKVxuXG5cdFx0Y29ubmVjdGlvbi5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnV2Vic29ja2V0IGNvbm5lY3RlZCcpXG5cdFx0fVxuXG5cblx0XHRjb25uZWN0aW9uLm9uY2xvc2UgPSBmdW5jdGlvbiAoZSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ1dlYnNvY2tldCBjbG9zZWQuIFRyeWluZyB0byByZWNvbm5lY3QuLi4nKVxuXHRcdFx0Ly8kdGltZW91dChjb25uZWN0LCAxMCoxMDAwKTtcblx0XHR9IFxuXG5cdFx0Y29ubmVjdGlvbi5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xuXHRcdFx0Y29uc29sZS5sb2coZSk7XG5cdFx0XHR2YXIgbWVzc2FnZSA9IEpTT04ucGFyc2UoZS5kYXRhKTtcblx0XHRcdFxuXHRcdFx0dmFyIG5hbWUgPSAnd3M6JyArIG1lc3NhZ2UudG9waWM7XG5cdFx0XHR2YXIgZGF0YSA9IG1lc3NhZ2UuZGF0YTtcblx0XHRcdGNvbnNvbGUubG9nKFwiYnJvYWRjYXN0aW5nOiBcIik7XG5cblx0XHRcdCRyb290U2NvcGUuJGJyb2FkY2FzdChuYW1lLCBkYXRhKTtcblx0XHR9XG5cbn1dKSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==