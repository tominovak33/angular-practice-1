angular.module("app",["ngRoute","ngAnimate"]),angular.module("app").controller("ApplicationCtrl",["$scope","$rootScope","UserSvc",function(t,e,n){window.localStorage.token&&n.getUser().then(function(e){t.$emit("userLoggedIn",e.data)}),t.$on("userLoggedIn",function(e,n){t.currentUser=n})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,e){t.login=function(n,o){e.login(n,o).then(function(e){t.$emit("userLoggedIn",e.data),window.location.href="#/"},function(e){t.loginValidation="Incorrect username & password combination"})},t.logout=function(){e.logout()}}]),angular.module("app").controller("PostsCtrl",["$scope","$http","PostsService","filterFilter",function(t,e,n,o){t.posts=[],t.addPost=function(){var e=CKEDITOR.instances.editor1.getData();e&&n.send({body:e,title:t.postTitle}).success(function(e){t.postBody=null,CKEDITOR.instances.editor1.setData(""),t.postTitle=null})},t.init_ckedit=function(){CKEDITOR.replace("editor1")},t.$on("ws:new_post",function(e,n){n=n[0],t.$apply(function(){t.posts.unshift(n),t.paginate()})}),t.$on("$viewContentLoaded",function(){}),t.currentPage=1,t.postsPerPage=5,t.prevPage=function(){t.currentPage>1&&(t.currentPage--,t.paginate())},t.nextPage=function(){t.currentPage<t.posts.length/t.postsPerPage&&(t.currentPage++,t.paginate())},t.setPage=function(e){t.currentPage=e,t.paginate()},t.range=function(t){return new Array(t)},t.paginate=function(){t.pagedPosts=[],t.pages=Math.ceil(t.posts.length/t.postsPerPage),t.numberOfPages=function(){return Math.ceil(t.posts.length/t.postsPerPage)};var e=(t.currentPage-1)*t.postsPerPage,n=e+t.postsPerPage;t.pagedPosts=t.posts.slice(e,n)},t.$watchGroup(["search.$","search._author.username","search.title","search.date",,"search.title"],function(){t.paginate()}),t.currentPage=1,t.postsPerPage=5,t.$watch("search",function(e){t.filteredPosts=o(t.posts,e),t.noOfPages=Math.ceil(t.filteredPosts.length/t.postsPerPage)}),n.get().success(function(e){t.posts=e,t.paginate()})}]).filter("output_html",["$sce",function(t){return function(e){return t.trustAsHtml(e)}}]).filter("startFrom",function(){return function(t,e){return t?(e=+e,t.slice(e)):[]}}),angular.module("app").service("PostsService",["$http",function(t){this.get=function(){return t.get("/api/posts")},this.send=function(e){return t.post("/api/posts",e)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,e){t.register=function(n,o,r){return o!=r?void(t.validationMessage="Your passwords did not match."):void e.register(n,o)}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}).when("/logout",{controller:"LoginCtrl",templateUrl:"logout.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var e=this;e.getUser=function(){return t.defaults.headers.common["X-Auth"]=window.localStorage.token,t.get("/api/users").then(function(t){return t})},e.login=function(n,o){return t.post("/api/sessions",{username:n,password:o}).then(function(n){return window.localStorage.token=n.data,t.defaults.headers.common["X-Auth"]=n.data,e.getUser()})},e.register=function(n,o,r){return t.post("/api/users",{username:n,password:o}).then(function(t){return e.login(n,o).then(function(){window.location.href="/"})})},e.logout=function(){window.localStorage.removeItem("token"),window.location.href="/"}}]),angular.module("app").run(["$rootScope","$timeout","$window",function(t,e,n){!function o(){var r="ws://"+n.location.host,s=new WebSocket(r);s.onopen=function(){},s.onclose=function(t){e(o,1e4)},s.onmessage=function(e){var n=JSON.parse(e.data),o="ws:"+n.topic,r=n.data;t.$broadcast(o,r)}}()}]);
//# sourceMappingURL=data:application/json;base64,