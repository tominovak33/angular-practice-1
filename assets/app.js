angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(o){o.$on("userLoggedIn",function(t,n){o.currentUser=n})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(o,t){o.login=function(n,e){t.login(n,e).then(function(t){o.$emit("userLoggedIn",t.data)})}}]),angular.module("app").controller("PostsCtrl",["$scope","$http","PostsService",function(o,t,n){o.addPost=function(){o.postBody&&n.send({username:"tomi7",body:o.postBody}).success(function(t){o.posts.unshift(t),o.postBody=null})},o.$on("ws:new_post",function(t,n){o.$apply(function(){o.posts.unshift(n)}),alert("new post recieved")}),n.get().success(function(t){o.posts=t})}]),angular.module("app").service("PostsService",["$http",function(o){this.get=function(){return o.get("/api/posts")},this.send=function(t){return o.post("/api/posts",t)}}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(o){var t=this;t.getUser=function(){return o.get("/api/users",{headers:{"X-Auth":this.token}})},t.login=function(n,e){return o.post("/api/sessions",{username:n,password:e}).then(function(n){return t.token=n.data,o.defaults.headers.common["X-Auth"]=n.data,t.getUser()})}}]),angular.module("app").run(["$rootScope","$timeout",function(o,t){var n="ws://localhost:3000",e=new WebSocket(n);e.onopen=function(){console.log("Websocket connected")},e.onclose=function(o){console.log("Websocket closed. Trying to reconnect...")},e.onmessage=function(t){console.log(t);var n=JSON.parse(t.data),e="ws:"+n.topic,s=n.data;console.log("broadcasting: "),o.$broadcast(e,s)}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uQ3RybC5qcyIsImxvZ2luQ3J0bC5qcyIsInBvc3RzQ3RybC5qcyIsInBvc3RzU2VydmljZS5qcyIsInJvdXRlcy5qcyIsInVzZXJTZXJ2aWNlLmpzIiwid2Vic29ja2V0cy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIiRvbiIsImV2ZW50IiwidXNlciIsImN1cnJlbnRVc2VyIiwiVXNlclN2YyIsImxvZ2luIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInRoZW4iLCJyZXNwb25zZSIsIiRlbWl0IiwiZGF0YSIsIiRodHRwIiwiUG9zdHNTZXJ2aWNlIiwiYWRkUG9zdCIsInBvc3RCb2R5Iiwic2VuZCIsImJvZHkiLCJzdWNjZXNzIiwicG9zdCIsInBvc3RzIiwidW5zaGlmdCIsIl8iLCIkYXBwbHkiLCJhbGVydCIsImdldCIsInNlcnZpY2UiLCJ0aGlzIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJzdmMiLCJnZXRVc2VyIiwiaGVhZGVycyIsIlgtQXV0aCIsInRva2VuIiwidmFsIiwiZGVmYXVsdHMiLCJjb21tb24iLCJydW4iLCIkcm9vdFNjb3BlIiwiJHRpbWVvdXQiLCJ1cmwiLCJjb25uZWN0aW9uIiwiV2ViU29ja2V0Iiwib25vcGVuIiwiY29uc29sZSIsImxvZyIsIm9uY2xvc2UiLCJlIiwib25tZXNzYWdlIiwibWVzc2FnZSIsIkpTT04iLCJwYXJzZSIsIm5hbWUiLCJ0b3BpYyIsIiRicm9hZGNhc3QiXSwibWFwcGluZ3MiOiJBQUNBQSxRQUFBQyxPQUFBLE9BQUEsWUNEQUQsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLG1CQUFBLFNBQUEsU0FBQUMsR0FDQUEsRUFBQUMsSUFBQSxlQUFBLFNBQUFDLEVBQUFDLEdBQ0FILEVBQUFJLFlBQUFELE9DSEFOLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxhQUFBLFNBQUEsVUFBQSxTQUFBQyxFQUFBSyxHQUNBTCxFQUFBTSxNQUFBLFNBQUFDLEVBQUFDLEdBQ0FILEVBQUFDLE1BQUFDLEVBQUFDLEdBQ0FDLEtBQUEsU0FBQUMsR0FFQVYsRUFBQVcsTUFBQSxlQUFBRCxFQUFBRSxZQ05BZixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBQSxTQUFBLFFBQUEsZUFBQSxTQUFBQyxFQUFBYSxFQUFBQyxHQUNBZCxFQUFBZSxRQUFBLFdBQ0FmLEVBQUFnQixVQUNBRixFQUFBRyxNQUNBVixTQUFBLFFBQ0FXLEtBQUFsQixFQUFBZ0IsV0FFQUcsUUFBQSxTQUFBQyxHQUNBcEIsRUFBQXFCLE1BQUFDLFFBQUFGLEdBQ0FwQixFQUFBZ0IsU0FBQSxRQUtBaEIsRUFBQUMsSUFBQSxjQUFBLFNBQUFzQixFQUFBSCxHQUNBcEIsRUFBQXdCLE9BQUEsV0FDQXhCLEVBQUFxQixNQUFBQyxRQUFBRixLQUVBSyxNQUFBLHVCQUdBWCxFQUFBWSxNQUNBUCxRQUFBLFNBQUFFLEdBQ0FyQixFQUFBcUIsTUFBQUEsT0N4QkF4QixRQUFBQyxPQUFBLE9BQ0E2QixRQUFBLGdCQUFBLFFBQUEsU0FBQWQsR0FDQWUsS0FBQUYsSUFBQSxXQUNBLE1BQUFiLEdBQUFhLElBQUEsZUFFQUUsS0FBQVgsS0FBQSxTQUFBRyxHQUNBLE1BQUFQLEdBQUFPLEtBQUEsYUFBQUEsT0NOQXZCLFFBQUFDLE9BQUEsT0FDQStCLFFBQUEsaUJBQUEsU0FBQUMsR0FDQUEsRUFDQUMsS0FBQSxLQUFBaEMsV0FBQSxZQUFBaUMsWUFBQSxlQUNBRCxLQUFBLGFBQUFoQyxXQUFBLGVBQUFpQyxZQUFBLGtCQUNBRCxLQUFBLFVBQUFoQyxXQUFBLFlBQUFpQyxZQUFBLGtCQ0xBbkMsUUFBQUMsT0FBQSxPQUNBNkIsUUFBQSxXQUFBLFFBQUEsU0FBQWQsR0FDQSxHQUFBb0IsR0FBQUwsSUFDQUssR0FBQUMsUUFBQSxXQUNBLE1BQUFyQixHQUFBYSxJQUFBLGNBQ0FTLFNBQUFDLFNBQUFSLEtBQUFTLFVBR0FKLEVBQUEzQixNQUFBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQUssR0FBQU8sS0FBQSxpQkFDQWIsU0FBQUEsRUFBQUMsU0FBQUEsSUFFQUMsS0FBQSxTQUFBNkIsR0FHQSxNQUZBTCxHQUFBSSxNQUFBQyxFQUFBMUIsS0FDQUMsRUFBQTBCLFNBQUFKLFFBQUFLLE9BQUEsVUFBQUYsRUFBQTFCLEtBQ0FxQixFQUFBQyxnQkNmQXJDLFFBQUFDLE9BQUEsT0FDQTJDLEtBQUEsYUFBQSxXQUFBLFNBQUFDLEVBQUFDLEdBRUEsR0FBQUMsR0FBQSxzQkFFQUMsRUFBQSxHQUFBQyxXQUFBRixFQUVBQyxHQUFBRSxPQUFBLFdBQ0FDLFFBQUFDLElBQUEsd0JBSUFKLEVBQUFLLFFBQUEsU0FBQUMsR0FDQUgsUUFBQUMsSUFBQSw2Q0FJQUosRUFBQU8sVUFBQSxTQUFBRCxHQUNBSCxRQUFBQyxJQUFBRSxFQUNBLElBQUFFLEdBQUFDLEtBQUFDLE1BQUFKLEVBQUF2QyxNQUVBNEMsRUFBQSxNQUFBSCxFQUFBSSxNQUNBN0MsRUFBQXlDLEVBQUF6QyxJQUNBb0MsU0FBQUMsSUFBQSxrQkFFQVAsRUFBQWdCLFdBQUFGLEVBQUE1QyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvL1RoaXMgZmlsZSBtdXN0IGJlIHRoZSBmaXJzdCBpbiB0aGUgbGlzdCB0byBiZSBjb25jYXRlbmF0ZWRcbmFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ25nUm91dGUnXSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcblx0LmNvbnRyb2xsZXIoJ0FwcGxpY2F0aW9uQ3RybCcgLCBbXCIkc2NvcGVcIiwgZnVuY3Rpb24gKCRzY29wZSkge1xuXHRcdCRzY29wZS4kb24oJ3VzZXJMb2dnZWRJbicsIGZ1bmN0aW9uKGV2ZW50LCB1c2VyKSB7XG5cdFx0XHQkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xuXHRcdH0pXG5cdH1dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuXHQuY29udHJvbGxlcignTG9naW5DdHJsJyAsIFtcIiRzY29wZVwiICwgXCJVc2VyU3ZjXCIgLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU3ZjKSB7XG5cdFx0JHNjb3BlLmxvZ2luID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuXHRcdFx0VXNlclN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSl7XG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcblx0XHRcdFx0XHQkc2NvcGUuJGVtaXQoJ3VzZXJMb2dnZWRJbicsIHJlc3BvbnNlLmRhdGEpO1xuXHRcdFx0XHR9KVxuXHRcdH1cblx0fV0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG5cdC5jb250cm9sbGVyKCdQb3N0c0N0cmwnLCBbXCIkc2NvcGVcIiAsIFwiJGh0dHBcIiwgXCJQb3N0c1NlcnZpY2VcIiwgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsIFBvc3RzU2VydmljZSkge1xuXHRcdCRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKCRzY29wZS5wb3N0Qm9keSkge1xuXHRcdFx0XHRQb3N0c1NlcnZpY2Uuc2VuZCh7XG5cdFx0XHRcdFx0dXNlcm5hbWU6ICd0b21pNycsXG5cdFx0XHRcdFx0Ym9keTogJHNjb3BlLnBvc3RCb2R5XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0KSB7XG5cdFx0XHRcdFx0JHNjb3BlLnBvc3RzLnVuc2hpZnQocG9zdCk7XG5cdFx0XHRcdFx0JHNjb3BlLnBvc3RCb2R5ID0gbnVsbDtcblx0XHRcdFx0fSlcblx0XHRcdH1cblx0XHR9XG5cblx0XHQkc2NvcGUuJG9uKCd3czpuZXdfcG9zdCcsIGZ1bmN0aW9uKF8sIHBvc3QpIHtcblx0XHRcdCRzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHQkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KTtcblx0XHRcdH0pXG5cdFx0XHRhbGVydChcIm5ldyBwb3N0IHJlY2lldmVkXCIpO1xuXHRcdH0pXG5cblx0UG9zdHNTZXJ2aWNlLmdldCgpXG5cdFx0LnN1Y2Nlc3MoZnVuY3Rpb24gKHBvc3RzKSB7XG5cdFx0XHQkc2NvcGUucG9zdHMgPSBwb3N0cztcblx0XHR9KVxuXG5cdH1dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuXHQuc2VydmljZSgnUG9zdHNTZXJ2aWNlJywgW1wiJGh0dHBcIiAsIGZ1bmN0aW9uICgkaHR0cCkge1xuXHRcdHRoaXMuZ2V0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cycpO1xuXHRcdH1cblx0XHR0aGlzLnNlbmQgPSBmdW5jdGlvbiAocG9zdCkge1xuXHRcdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcG9zdHMnLCBwb3N0KTtcblx0XHR9XG5cdH1dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuXHQuY29uZmlnKFtcIiRyb3V0ZVByb3ZpZGVyXCIgLGZ1bmN0aW9uICgkcm91dGVQcm92aWRlcikge1xuXHRcdCRyb3V0ZVByb3ZpZGVyXG5cdFx0XHQud2hlbignLycgLCB7Y29udHJvbGxlcjogJ1Bvc3RzQ3RybCcsIHRlbXBsYXRlVXJsOiAncG9zdHMuaHRtbCd9KVxuXHRcdFx0LndoZW4oJy9yZWdpc3RlcicgLCB7Y29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsIHRlbXBsYXRlVXJsOiAncmVnaXN0ZXIuaHRtbCd9KVxuXHRcdFx0LndoZW4oJy9sb2dpbicgLCB7Y29udHJvbGxlcjogJ0xvZ2luQ3RybCcsIHRlbXBsYXRlVXJsOiAnbG9naW4uaHRtbCd9KVxuXHR9XSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcblx0LnNlcnZpY2UoJ1VzZXJTdmMnLCBbXCIkaHR0cFwiLCBmdW5jdGlvbigkaHR0cCkge1xuXHRcdHZhciBzdmMgPSB0aGlzO1xuXHRcdHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VycycsIHtcblx0XHRcdFx0aGVhZGVyczogeyAnWC1BdXRoJzogdGhpcy50b2tlbiB9XG5cdFx0XHR9KVxuXHRcdH1cblx0XHRzdmMubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG5cdFx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIHtcblx0XHRcdFx0dXNlcm5hbWU6IHVzZXJuYW1lLCBwYXNzd29yZDogcGFzc3dvcmRcblx0XHRcdH0pXG5cdFx0XHQudGhlbihmdW5jdGlvbiAodmFsKSB7XG5cdFx0XHRcdHN2Yy50b2tlbiA9IHZhbC5kYXRhO1xuXHRcdFx0XHQkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB2YWwuZGF0YVxuXHRcdFx0XHRyZXR1cm4gc3ZjLmdldFVzZXIoKTtcblx0XHRcdH0pXG5cdFx0fVxuXHR9XSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5ydW4oW1wiJHJvb3RTY29wZVwiLCBcIiR0aW1lb3V0XCIgLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHRpbWVvdXQpIHtcblx0XG5cdFx0dmFyIHVybCA9ICd3czovL2xvY2FsaG9zdDozMDAwJ1xuXG5cdFx0dmFyIGNvbm5lY3Rpb24gPSBuZXcgV2ViU29ja2V0KHVybClcblxuXHRcdGNvbm5lY3Rpb24ub25vcGVuID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0Y29uc29sZS5sb2coJ1dlYnNvY2tldCBjb25uZWN0ZWQnKVxuXHRcdH1cblxuXG5cdFx0Y29ubmVjdGlvbi5vbmNsb3NlID0gZnVuY3Rpb24gKGUpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdXZWJzb2NrZXQgY2xvc2VkLiBUcnlpbmcgdG8gcmVjb25uZWN0Li4uJylcblx0XHRcdC8vJHRpbWVvdXQoY29ubmVjdCwgMTAqMTAwMCk7XG5cdFx0fSBcblxuXHRcdGNvbm5lY3Rpb24ub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcblx0XHRcdGNvbnNvbGUubG9nKGUpO1xuXHRcdFx0dmFyIG1lc3NhZ2UgPSBKU09OLnBhcnNlKGUuZGF0YSk7XG5cdFx0XHRcblx0XHRcdHZhciBuYW1lID0gJ3dzOicgKyBtZXNzYWdlLnRvcGljO1xuXHRcdFx0dmFyIGRhdGEgPSBtZXNzYWdlLmRhdGE7XG5cdFx0XHRjb25zb2xlLmxvZyhcImJyb2FkY2FzdGluZzogXCIpO1xuXG5cdFx0XHQkcm9vdFNjb3BlLiRicm9hZGNhc3QobmFtZSwgZGF0YSk7XG5cdFx0fVxuXG59XSkiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=