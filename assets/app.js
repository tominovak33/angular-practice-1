angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(o){o.$on("userLoggedIn",function(t,n){o.currentUser=n})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(o,t){o.login=function(n,e){t.login(n,e).then(function(t){o.$emit("userLoggedIn",t.data)})}}]),angular.module("app").controller("PostsCtrl",["$scope","$http","PostsService",function(o,t,n){o.addPost=function(){o.postBody&&n.send({username:"tomi7",body:o.postBody}).success(function(t){o.posts.unshift(t),o.postBody=null})},o.$on("ws:new_post",function(t,n){o.$apply(function(){o.posts.unshift(n)})}),n.get().success(function(t){o.posts=t})}]),angular.module("app").service("PostsService",["$http",function(o){this.get=function(){return o.get("/api/posts")},this.send=function(t){return o.post("/api/posts",t)}}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(o){var t=this;t.getUser=function(){return o.get("/api/users",{headers:{"X-Auth":this.token}})},t.login=function(n,e){return o.post("/api/sessions",{username:n,password:e}).then(function(n){return t.token=n.data,o.defaults.headers.common["X-Auth"]=n.data,t.getUser()})}}]),angular.module("app").run(["$rootScope","$timeout","$window",function(o,t,n){var e="ws://"+n.location.host,s=new WebSocket(e);s.onopen=function(){console.log("Websocket connected")},s.onclose=function(o){console.log("Websocket closed. Trying to reconnect...")},s.onmessage=function(t){console.log(t);var n=JSON.parse(t.data),e="ws:"+n.topic,s=n.data;console.log("broadcasting: "),o.$broadcast(e,s)}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uQ3RybC5qcyIsImxvZ2luQ3J0bC5qcyIsInBvc3RzQ3RybC5qcyIsInBvc3RzU2VydmljZS5qcyIsInJvdXRlcy5qcyIsInVzZXJTZXJ2aWNlLmpzIiwid2Vic29ja2V0cy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIiRvbiIsImV2ZW50IiwidXNlciIsImN1cnJlbnRVc2VyIiwiVXNlclN2YyIsImxvZ2luIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInRoZW4iLCJyZXNwb25zZSIsIiRlbWl0IiwiZGF0YSIsIiRodHRwIiwiUG9zdHNTZXJ2aWNlIiwiYWRkUG9zdCIsInBvc3RCb2R5Iiwic2VuZCIsImJvZHkiLCJzdWNjZXNzIiwicG9zdCIsInBvc3RzIiwidW5zaGlmdCIsIl8iLCIkYXBwbHkiLCJnZXQiLCJzZXJ2aWNlIiwidGhpcyIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwic3ZjIiwiZ2V0VXNlciIsImhlYWRlcnMiLCJYLUF1dGgiLCJ0b2tlbiIsInZhbCIsImRlZmF1bHRzIiwiY29tbW9uIiwicnVuIiwiJHJvb3RTY29wZSIsIiR0aW1lb3V0IiwiJHdpbmRvdyIsImhvc3QiLCJsb2NhdGlvbiIsImNvbm5lY3Rpb24iLCJXZWJTb2NrZXQiLCJvbm9wZW4iLCJjb25zb2xlIiwibG9nIiwib25jbG9zZSIsImUiLCJvbm1lc3NhZ2UiLCJtZXNzYWdlIiwiSlNPTiIsInBhcnNlIiwibmFtZSIsInRvcGljIiwiJGJyb2FkY2FzdCJdLCJtYXBwaW5ncyI6IkFBQ0FBLFFBQUFDLE9BQUEsT0FBQSxZQ0RBRCxRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsbUJBQUEsU0FBQSxTQUFBQyxHQUNBQSxFQUFBQyxJQUFBLGVBQUEsU0FBQUMsRUFBQUMsR0FDQUgsRUFBQUksWUFBQUQsT0NIQU4sUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGFBQUEsU0FBQSxVQUFBLFNBQUFDLEVBQUFLLEdBQ0FMLEVBQUFNLE1BQUEsU0FBQUMsRUFBQUMsR0FDQUgsRUFBQUMsTUFBQUMsRUFBQUMsR0FDQUMsS0FBQSxTQUFBQyxHQUVBVixFQUFBVyxNQUFBLGVBQUFELEVBQUFFLFlDTkFmLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxhQUFBLFNBQUEsUUFBQSxlQUFBLFNBQUFDLEVBQUFhLEVBQUFDLEdBQ0FkLEVBQUFlLFFBQUEsV0FDQWYsRUFBQWdCLFVBQ0FGLEVBQUFHLE1BQ0FWLFNBQUEsUUFDQVcsS0FBQWxCLEVBQUFnQixXQUVBRyxRQUFBLFNBQUFDLEdBQ0FwQixFQUFBcUIsTUFBQUMsUUFBQUYsR0FDQXBCLEVBQUFnQixTQUFBLFFBS0FoQixFQUFBQyxJQUFBLGNBQUEsU0FBQXNCLEVBQUFILEdBQ0FwQixFQUFBd0IsT0FBQSxXQUNBeEIsRUFBQXFCLE1BQUFDLFFBQUFGLE9BSUFOLEVBQUFXLE1BQ0FOLFFBQUEsU0FBQUUsR0FDQXJCLEVBQUFxQixNQUFBQSxPQ3ZCQXhCLFFBQUFDLE9BQUEsT0FDQTRCLFFBQUEsZ0JBQUEsUUFBQSxTQUFBYixHQUNBYyxLQUFBRixJQUFBLFdBQ0EsTUFBQVosR0FBQVksSUFBQSxlQUVBRSxLQUFBVixLQUFBLFNBQUFHLEdBQ0EsTUFBQVAsR0FBQU8sS0FBQSxhQUFBQSxPQ05BdkIsUUFBQUMsT0FBQSxPQUNBOEIsUUFBQSxpQkFBQSxTQUFBQyxHQUNBQSxFQUNBQyxLQUFBLEtBQUEvQixXQUFBLFlBQUFnQyxZQUFBLGVBQ0FELEtBQUEsYUFBQS9CLFdBQUEsZUFBQWdDLFlBQUEsa0JBQ0FELEtBQUEsVUFBQS9CLFdBQUEsWUFBQWdDLFlBQUEsa0JDTEFsQyxRQUFBQyxPQUFBLE9BQ0E0QixRQUFBLFdBQUEsUUFBQSxTQUFBYixHQUNBLEdBQUFtQixHQUFBTCxJQUNBSyxHQUFBQyxRQUFBLFdBQ0EsTUFBQXBCLEdBQUFZLElBQUEsY0FDQVMsU0FBQUMsU0FBQVIsS0FBQVMsVUFHQUosRUFBQTFCLE1BQUEsU0FBQUMsRUFBQUMsR0FDQSxNQUFBSyxHQUFBTyxLQUFBLGlCQUNBYixTQUFBQSxFQUFBQyxTQUFBQSxJQUVBQyxLQUFBLFNBQUE0QixHQUdBLE1BRkFMLEdBQUFJLE1BQUFDLEVBQUF6QixLQUNBQyxFQUFBeUIsU0FBQUosUUFBQUssT0FBQSxVQUFBRixFQUFBekIsS0FDQW9CLEVBQUFDLGdCQ2ZBcEMsUUFBQUMsT0FBQSxPQUNBMEMsS0FBQSxhQUFBLFdBQUEsVUFBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUdBLEdBQUFDLEdBQUEsUUFBQUQsRUFBQUUsU0FBQUQsS0FFQUUsRUFBQSxHQUFBQyxXQUFBSCxFQUVBRSxHQUFBRSxPQUFBLFdBQ0FDLFFBQUFDLElBQUEsd0JBSUFKLEVBQUFLLFFBQUEsU0FBQUMsR0FDQUgsUUFBQUMsSUFBQSw2Q0FJQUosRUFBQU8sVUFBQSxTQUFBRCxHQUNBSCxRQUFBQyxJQUFBRSxFQUNBLElBQUFFLEdBQUFDLEtBQUFDLE1BQUFKLEVBQUF4QyxNQUVBNkMsRUFBQSxNQUFBSCxFQUFBSSxNQUNBOUMsRUFBQTBDLEVBQUExQyxJQUNBcUMsU0FBQUMsSUFBQSxrQkFFQVQsRUFBQWtCLFdBQUFGLEVBQUE3QyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvL1RoaXMgZmlsZSBtdXN0IGJlIHRoZSBmaXJzdCBpbiB0aGUgbGlzdCB0byBiZSBjb25jYXRlbmF0ZWRcbmFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ25nUm91dGUnXSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcblx0LmNvbnRyb2xsZXIoJ0FwcGxpY2F0aW9uQ3RybCcgLCBbXCIkc2NvcGVcIiwgZnVuY3Rpb24gKCRzY29wZSkge1xuXHRcdCRzY29wZS4kb24oJ3VzZXJMb2dnZWRJbicsIGZ1bmN0aW9uKGV2ZW50LCB1c2VyKSB7XG5cdFx0XHQkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xuXHRcdH0pXG5cdH1dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuXHQuY29udHJvbGxlcignTG9naW5DdHJsJyAsIFtcIiRzY29wZVwiICwgXCJVc2VyU3ZjXCIgLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU3ZjKSB7XG5cdFx0JHNjb3BlLmxvZ2luID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuXHRcdFx0VXNlclN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSl7XG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcblx0XHRcdFx0XHQkc2NvcGUuJGVtaXQoJ3VzZXJMb2dnZWRJbicsIHJlc3BvbnNlLmRhdGEpO1xuXHRcdFx0XHR9KVxuXHRcdH1cblx0fV0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG5cdC5jb250cm9sbGVyKCdQb3N0c0N0cmwnLCBbXCIkc2NvcGVcIiAsIFwiJGh0dHBcIiwgXCJQb3N0c1NlcnZpY2VcIiwgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsIFBvc3RzU2VydmljZSkge1xuXHRcdCRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKCRzY29wZS5wb3N0Qm9keSkge1xuXHRcdFx0XHRQb3N0c1NlcnZpY2Uuc2VuZCh7XG5cdFx0XHRcdFx0dXNlcm5hbWU6ICd0b21pNycsXG5cdFx0XHRcdFx0Ym9keTogJHNjb3BlLnBvc3RCb2R5XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0KSB7XG5cdFx0XHRcdFx0JHNjb3BlLnBvc3RzLnVuc2hpZnQocG9zdCk7XG5cdFx0XHRcdFx0JHNjb3BlLnBvc3RCb2R5ID0gbnVsbDtcblx0XHRcdFx0fSlcblx0XHRcdH1cblx0XHR9XG5cblx0XHQkc2NvcGUuJG9uKCd3czpuZXdfcG9zdCcsIGZ1bmN0aW9uKF8sIHBvc3QpIHtcblx0XHRcdCRzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHQkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KTtcblx0XHRcdH0pXG5cdFx0fSlcblxuXHRQb3N0c1NlcnZpY2UuZ2V0KClcblx0XHQuc3VjY2VzcyhmdW5jdGlvbiAocG9zdHMpIHtcblx0XHRcdCRzY29wZS5wb3N0cyA9IHBvc3RzO1xuXHRcdH0pXG5cblx0fV0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG5cdC5zZXJ2aWNlKCdQb3N0c1NlcnZpY2UnLCBbXCIkaHR0cFwiICwgZnVuY3Rpb24gKCRodHRwKSB7XG5cdFx0dGhpcy5nZXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJyk7XG5cdFx0fVxuXHRcdHRoaXMuc2VuZCA9IGZ1bmN0aW9uIChwb3N0KSB7XG5cdFx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycsIHBvc3QpO1xuXHRcdH1cblx0fV0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG5cdC5jb25maWcoW1wiJHJvdXRlUHJvdmlkZXJcIiAsZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyKSB7XG5cdFx0JHJvdXRlUHJvdmlkZXJcblx0XHRcdC53aGVuKCcvJyAsIHtjb250cm9sbGVyOiAnUG9zdHNDdHJsJywgdGVtcGxhdGVVcmw6ICdwb3N0cy5odG1sJ30pXG5cdFx0XHQud2hlbignL3JlZ2lzdGVyJyAsIHtjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJywgdGVtcGxhdGVVcmw6ICdyZWdpc3Rlci5odG1sJ30pXG5cdFx0XHQud2hlbignL2xvZ2luJyAsIHtjb250cm9sbGVyOiAnTG9naW5DdHJsJywgdGVtcGxhdGVVcmw6ICdsb2dpbi5odG1sJ30pXG5cdH1dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuXHQuc2VydmljZSgnVXNlclN2YycsIFtcIiRodHRwXCIsIGZ1bmN0aW9uKCRodHRwKSB7XG5cdFx0dmFyIHN2YyA9IHRoaXM7XG5cdFx0c3ZjLmdldFVzZXIgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJywge1xuXHRcdFx0XHRoZWFkZXJzOiB7ICdYLUF1dGgnOiB0aGlzLnRva2VuIH1cblx0XHRcdH0pXG5cdFx0fVxuXHRcdHN2Yy5sb2dpbiA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcblx0XHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zJywge1xuXHRcdFx0XHR1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxuXHRcdFx0fSlcblx0XHRcdC50aGVuKGZ1bmN0aW9uICh2YWwpIHtcblx0XHRcdFx0c3ZjLnRva2VuID0gdmFsLmRhdGE7XG5cdFx0XHRcdCRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IHZhbC5kYXRhXG5cdFx0XHRcdHJldHVybiBzdmMuZ2V0VXNlcigpO1xuXHRcdFx0fSlcblx0XHR9XG5cdH1dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnJ1bihbXCIkcm9vdFNjb3BlXCIsIFwiJHRpbWVvdXRcIiAsIFwiJHdpbmRvd1wiICwgZnVuY3Rpb24gKCRyb290U2NvcGUsICR0aW1lb3V0LCAkd2luZG93KSB7XG5cdFxuXHRcdC8vQ3JlYXRlIGEgd2Vic29ja2V0IGNvbm5lY3Rpb24gd2l0aCB0aGUgc2VydmVyXG5cdFx0dmFyIGhvc3QgPSBcIndzOi8vXCIgKyAkd2luZG93LmxvY2F0aW9uLmhvc3Rcblx0XHQgIFxuXHRcdHZhciBjb25uZWN0aW9uID0gbmV3IFdlYlNvY2tldChob3N0KVxuXG5cdFx0Y29ubmVjdGlvbi5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnV2Vic29ja2V0IGNvbm5lY3RlZCcpXG5cdFx0fVxuXG5cblx0XHRjb25uZWN0aW9uLm9uY2xvc2UgPSBmdW5jdGlvbiAoZSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ1dlYnNvY2tldCBjbG9zZWQuIFRyeWluZyB0byByZWNvbm5lY3QuLi4nKVxuXHRcdFx0Ly8kdGltZW91dChjb25uZWN0LCAxMCoxMDAwKTtcblx0XHR9IFxuXG5cdFx0Y29ubmVjdGlvbi5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xuXHRcdFx0Y29uc29sZS5sb2coZSk7XG5cdFx0XHR2YXIgbWVzc2FnZSA9IEpTT04ucGFyc2UoZS5kYXRhKTtcblx0XHRcdFxuXHRcdFx0dmFyIG5hbWUgPSAnd3M6JyArIG1lc3NhZ2UudG9waWM7XG5cdFx0XHR2YXIgZGF0YSA9IG1lc3NhZ2UuZGF0YTtcblx0XHRcdGNvbnNvbGUubG9nKFwiYnJvYWRjYXN0aW5nOiBcIik7XG5cblx0XHRcdCRyb290U2NvcGUuJGJyb2FkY2FzdChuYW1lLCBkYXRhKTtcblx0XHR9XG5cbn1dKSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==